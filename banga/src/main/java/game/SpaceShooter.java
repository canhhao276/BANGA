package game;

import java.util.ArrayList;
import java.util.List;

import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundImage;
import javafx.scene.layout.BackgroundPosition;
import javafx.scene.layout.BackgroundRepeat;
import javafx.scene.layout.BackgroundSize;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class SpaceShooter extends Application {

    public static final int WIDTH = 600;
    public static final int HEIGHT = 800;
    public static int numLives = 3;

    private int score;
    private boolean bossExists;
    private boolean gameRunning;

    private static List<GameObject> gameObjects = new ArrayList<>();
    private Player player;
    private Pane root;
    private Scene scene;
    private GraphicsContext gc;

    private Label scoreLabel;
    private Image heartImage;
    private Image backgroundImage;

    private AnimationTimer gameLoop;

    private int lastBossSpawnScore = 0;

    private long lastShootTime = 0; // Th·ªùi gian l·∫ßn b·∫Øn cu·ªëi c√πng(sua)
    private static final long SHOOT_DELAY = 200_000_000; // 300ms(ƒë∆°n v·ªã: nanoseconds)(sua)
    private boolean isShooting = false; // Bi·∫øn theo d√µi tr·∫°ng th√°i b·∫Øn(sua)

    private double backgroundY = 0; // V·ªã tr√≠ Y c·ªßa ·∫£nh n·ªÅn
    private double backgroundSpeed = 1; // T·ªëc ƒë·ªô di chuy·ªÉn c·ªßa ·∫£nh n·ªÅn

    private ScrollingBackground scrollingBackground;

    private double mouseX = -1, mouseY = -1; // Th√™m bi·∫øn l∆∞u v·ªã tr√≠ chu·ªôt

    public static List<GameObject> getGameObjects() {
        return gameObjects;
    }

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Space Shooter");

        // Kh·ªüi t·∫°o background ƒë·ªông
        scrollingBackground = new ScrollingBackground("background.png", WIDTH, HEIGHT);

        // Hi·ªÉn th·ªã m√†n h√¨nh ch√≠nh
        showMainMenu(primaryStage);
    }

    private void showMainMenu(Stage primaryStage) {
        Pane rootStart = new Pane();
        Canvas canvas = new Canvas(WIDTH, HEIGHT);
        GraphicsContext gc = canvas.getGraphicsContext2D();
        rootStart.getChildren().add(canvas);

        // L∆∞u th√¥ng tin c√°c n√∫t ƒë·ªÉ x·ª≠ l√Ω hover v√† click
        class MenuButton {
            String label;
            double x, y, width, height;

            MenuButton(String label, double x, double y, double width, double height) {
                this.label = label;
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
            }

            boolean isHovered(double mx, double my) {
                return mx >= x && mx <= x + width && my >= y && my <= y + height;
            }
        }

        double btnWidth = 260, btnHeight = 50, arc = 25;
        double startY = HEIGHT / 2 - 70;
        MenuButton[] buttons = {
            new MenuButton("START", WIDTH / 2 - btnWidth / 2, startY, btnWidth, btnHeight),
            new MenuButton("INSTRUCTIONS", WIDTH / 2 - btnWidth / 2, startY + 70, btnWidth, btnHeight),
            new MenuButton("QUIT", WIDTH / 2 - btnWidth / 2, startY + 140, btnWidth, btnHeight)
        };

        // B·∫Øt s·ª± ki·ªán di chuy·ªÉn chu·ªôt ƒë·ªÉ c·∫≠p nh·∫≠t mouseX, mouseY
        canvas.setOnMouseMoved(e -> {
            mouseX = e.getX();
            mouseY = e.getY();
        });

        // T·∫°o AnimationTimer ƒë·ªÉ c·∫≠p nh·∫≠t v√† v·∫Ω background ƒë·ªông + menu
        AnimationTimer menuLoop = new AnimationTimer() {
            @Override
            public void handle(long now) {
                scrollingBackground.update();
                scrollingBackground.render(gc);

                // V·∫Ω ti√™u ƒë·ªÅ
                gc.setFill(Color.CYAN);
                gc.setFont(Font.font("Impact", 64)); // ƒê·ªïi sang Impact, size l·ªõn
                gc.fillText("Space ShooterüöÄ", WIDTH / 2 - 210, HEIGHT / 2 - 150);

                // V·∫Ω c√°c n√∫t v·ªõi hi·ªáu ·ª©ng hover
                for (int i = 0; i < buttons.length; i++) {
                    MenuButton btn = buttons[i];
                    boolean hovered = btn.isHovered(mouseX, mouseY);
                    double scale = hovered ? 0.93 : 1.0;
                    double w = btn.width * scale;
                    double h = btn.height * scale;
                    double x = btn.x + (btn.width - w) / 2;
                    double y = btn.y + (btn.height - h) / 2;

                    // ƒê·ªïi m√†u n·ªÅn t·ª´ng n√∫t
                    Color bgColor;
                    switch (i) {
                        case 0: bgColor = Color.rgb(0, 180, 80, 0.85); break;        // START: xanh l√°
                        case 1: bgColor = Color.rgb(255, 140, 0, 0.85); break;       // INSTRUCTIONS: cam
                        case 2: bgColor = Color.rgb(200, 40, 40, 0.85); break;       // QUIT: ƒë·ªè
                        default: bgColor = Color.rgb(30, 30, 30, 0.8);
                    }
                    gc.setFill(bgColor);
                    gc.fillRoundRect(x, y, w, h, arc, arc);

                    // V·∫Ω ch·ªØ cƒÉn gi·ªØa v·ªõi Impact cho t·∫•t c·∫£ n√∫t
                    gc.setFill(Color.CYAN);
                    gc.setFont(Font.font("Impact", 32));
                    javafx.scene.text.Text tempText = new javafx.scene.text.Text(btn.label);
                    tempText.setFont(gc.getFont());
                    double textWidth = tempText.getLayoutBounds().getWidth();
                    gc.fillText(btn.label, WIDTH / 2 - textWidth / 2, y + h / 2 + 11);
                }
            }
        };
        menuLoop.start();

        Scene startScene = new Scene(rootStart, WIDTH, HEIGHT);
        primaryStage.setScene(startScene);

        // X·ª≠ l√Ω s·ª± ki·ªán chu·ªôt cho c√°c n√∫t
        startScene.setOnMouseClicked(event -> {
            double x = event.getX();
            double y = event.getY();
            if (buttons[0].isHovered(x, y)) {
                menuLoop.stop();
                resetGame();
                startGame(primaryStage);
            } else if (buttons[1].isHovered(x, y)) {
                menuLoop.stop();
                showInstructions(primaryStage);
            } else if (buttons[2].isHovered(x, y)) {
                primaryStage.close();
            }
        });

        primaryStage.show();
    }

    private void showInstructions(Stage primaryStage) {
        Pane rootInstructions = new Pane();
        Canvas canvas = new Canvas(WIDTH, HEIGHT);
        GraphicsContext gc = canvas.getGraphicsContext2D();
        rootInstructions.getChildren().add(canvas);

        // T·∫°o AnimationTimer ƒë·ªÉ c·∫≠p nh·∫≠t v√† v·∫Ω background ƒë·ªông
        AnimationTimer instructionsLoop = new AnimationTimer() {
            @Override
            public void handle(long now) {
                scrollingBackground.update(); // C·∫≠p nh·∫≠t v·ªã tr√≠ background
                scrollingBackground.render(gc); // V·∫Ω background

                // V·∫Ω n·ªôi dung h∆∞·ªõng d·∫´n
                gc.setFill(Color.CYAN); // ƒê·∫∑t m√†u ch·ªØ l√† xanh d∆∞∆°ng nh·∫°t
                gc.setFont(Font.font("Arial", 25)); // ƒê·∫∑t font ch·ªØ l·ªõn h∆°n
                gc.fillText("Use the arrow keys to move your spaceship.", 50, 200);
                gc.fillText("Press SPACE to shoot bullets.", 50, 250);
                gc.fillText("Avoid enemies and collect power-ups.", 50, 300);
            }
        };
        instructionsLoop.start();

        // Th√™m n√∫t "Back" ƒë·ªÉ quay l·∫°i m√†n h√¨nh ch√≠nh
        Button backButton = new Button("Back");
        backButton.setFont(Font.font("Arial", 30)); // TƒÉng k√≠ch th∆∞·ªõc font ch·ªØ
        backButton.setStyle("-fx-background-color: gray; -fx-text-fill: white;");
        backButton.setLayoutX(WIDTH / 2 - 50); // ƒê·∫∑t n√∫t ·ªü gi·ªØa m√†n h√¨nh
        backButton.setLayoutY(HEIGHT - 200); // ƒê∆∞a n√∫t l√™n tr√™n m·ªôt ch√∫t
        backButton.setOnAction(e -> {
            instructionsLoop.stop(); // D·ª´ng v√≤ng l·∫∑p n·ªÅn ƒë·ªông
            showMainMenu(primaryStage); // Quay l·∫°i m√†n h√¨nh ch√≠nh
        });

        rootInstructions.getChildren().add(backButton);

        Scene instructionsScene = new Scene(rootInstructions, WIDTH, HEIGHT);
        primaryStage.setScene(instructionsScene);

        // X·ª≠ l√Ω s·ª± ki·ªán quay l·∫°i m√†n h√¨nh ch√≠nh b·∫±ng ph√≠m BACK_SPACE
        instructionsScene.setOnKeyPressed(event -> {
            if (event.getCode().toString().equals("BACK_SPACE")) {
                instructionsLoop.stop();
                showMainMenu(primaryStage);
            }
        });

        primaryStage.show();
    }

    private void showStartScreen(Stage primaryStage) {
        VBox rootStart = new VBox(20);
        rootStart.setAlignment(Pos.CENTER);

        // Th√™m ·∫£nh n·ªÅn
        Image backgroundImage = new Image("backgroudMainMenu.png");
        BackgroundImage bgImage = new BackgroundImage(
            backgroundImage,
            BackgroundRepeat.NO_REPEAT,
            BackgroundRepeat.NO_REPEAT,
            BackgroundPosition.CENTER,
            new BackgroundSize(BackgroundSize.AUTO, BackgroundSize.AUTO, false, false, true, true)
        );
        rootStart.setBackground(new Background(bgImage));

        // Ti√™u ƒë·ªÅ
        Text title = new Text("Space Shooter");
        title.setFont(Font.font("Arial", 30));
        title.setFill(Color.WHITE);

        // N√∫t START
        Button startButton = new Button("START");
        startButton.setFont(Font.font("Arial", 20));
        startButton.setOnAction(e -> {
            // ƒê·∫∑t l·∫°i tr·∫°ng th√°i tr√≤ ch∆°i
            resetGame();
            startGame(primaryStage);
        });

        // N√∫t QUIT
        Button quitButton = new Button("QUIT");
        quitButton.setFont(Font.font("Arial", 20));
        quitButton.setOnAction(e -> primaryStage.close());

        rootStart.getChildren().addAll(title, startButton, quitButton);

        Scene startScene = new Scene(rootStart, WIDTH, HEIGHT);
        primaryStage.setScene(startScene);
        primaryStage.show();
    }

    private void initGame() {
        gameObjects = new ArrayList<>();
        player = new Player(WIDTH / 2, HEIGHT - 50);
        gameObjects.add(player);
        score = 0;
        bossExists = false;
        gameRunning = true;
    }

    private void initEventHandlers() {
        scene.setOnKeyPressed(event -> {
            switch (event.getCode()) {
                case LEFT:
                    player.setMoveLeft(true);
                    break;
                case RIGHT:
                    player.setMoveRight(true);
                    break;
                case UP:
                    player.setMoveForward(true);
                    break;
                case DOWN:
                    player.setMoveBackward(true);
                    break;
                case SPACE:
                    isShooting = true; // B·∫Øt ƒë·∫ßu b·∫Øn
                    break;
            }
        });

        scene.setOnKeyReleased(event -> {
            switch (event.getCode()) {
                case LEFT:
                    player.setMoveLeft(false);
                    break;
                case RIGHT:
                    player.setMoveRight(false);
                    break;
                case UP:
                    player.setMoveForward(false);
                    break;
                case DOWN:
                    player.setMoveBackward(false);
                    break;
                case SPACE:
                    isShooting = false; // Ng·ª´ng b·∫Øn
            }
        });
    }

    private void update() {
        if (numLives <= 0) {
            System.out.println("Game Over! Returning to game over screen...");
            showGameOverScreen((Stage) root.getScene().getWindow());
            return;
        }

        // C·∫≠p nh·∫≠t v·ªã tr√≠ ·∫£nh n·ªÅn
        backgroundY += backgroundSpeed;
        if (backgroundY >= HEIGHT) {
            backgroundY = 0; // L·∫∑p l·∫°i ·∫£nh n·ªÅn
        }

        // Ki·ªÉm tra tr·∫°ng th√°i b·∫Øn
        if (isShooting) {
            long currentTime = System.nanoTime();
            if (currentTime - lastShootTime >= SHOOT_DELAY) {
                player.shoot(gameObjects); // B·∫Øn ƒë·∫°n
                lastShootTime = currentTime; // C·∫≠p nh·∫≠t th·ªùi gian b·∫Øn
            }
        }

        // C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c ƒë·ªëi t∆∞·ª£ng
        for (GameObject obj : gameObjects) {
            obj.update();

            // N·∫øu ƒë·ªëi t∆∞·ª£ng l√† Player, gi·ªõi h·∫°n di chuy·ªÉn trong khung h√¨nh
            if (obj instanceof Player) {
                Player player = (Player) obj;

                // Gi·ªõi h·∫°n di chuy·ªÉn theo chi·ªÅu ngang
                if (player.getX() < 0) {
                    player.setX(0); // Kh√¥ng cho v∆∞·ª£t qu√° b√™n tr√°i
                } else if (player.getX() + player.getWidth() > WIDTH) {
                    player.setX(WIDTH - player.getWidth()); // Kh√¥ng cho v∆∞·ª£t qu√° b√™n ph·∫£i
                }

                // Gi·ªõi h·∫°n di chuy·ªÉn theo chi·ªÅu d·ªçc
                if (player.getY() < 0) {
                    player.setX(0); // Kh√¥ng cho v∆∞·ª£t qu√° ph√≠a tr√™n
                } else if (player.getY() + player.getHeight() > HEIGHT) {
                    player.setX(HEIGHT - player.getHeight()); // Kh√¥ng cho v∆∞·ª£t qu√° ph√≠a d∆∞·ªõi
                }
            }

            // Ki·ªÉm tra n·∫øu Enemy v∆∞·ª£t qu√° ƒë√°y khung h√¨nh
            if (obj instanceof Enemy && obj.getY() > HEIGHT) {
                obj.setDead(true); // ƒê√°nh d·∫•u Enemy l√† "dead"
                numLives--; // Gi·∫£m s·ªë m·∫°ng
            }
        }

        // Ki·ªÉm tra va ch·∫°m
        checkCollisions();

        // Lo·∫°i b·ªè c√°c ƒë·ªëi t∆∞·ª£ng "dead"
        gameObjects.removeIf(GameObject::isDead);

        // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa boss sau khi lo·∫°i b·ªè c√°c ƒë·ªëi t∆∞·ª£ng "dead"
        boolean bossStillExists = false;
        for (GameObject obj : gameObjects) {
            if (obj instanceof BossEnemy && !obj.isDead()) {
                bossStillExists = true;
                break;
            }
        }
        bossExists = bossStillExists;

        // Sinh th√™m k·∫ª ƒë·ªãch, boss, v√† power-up
        spawnEnemy();
        if (score >= lastBossSpawnScore + 250 && !bossExists) {
            spawnBossEnemy();
            lastBossSpawnScore += 250; // C·∫≠p nh·∫≠t m·ªëc ƒëi·ªÉm ti·∫øp theo
        }

        // C·∫≠p nh·∫≠t UI
        scoreLabel.setText("Score: " + score);
    }

    private void render() {
        // V·∫Ω ·∫£nh n·ªÅn
        if (backgroundImage != null) {
            gc.drawImage(backgroundImage, 0, backgroundY, WIDTH, HEIGHT); // V·∫Ω ·∫£nh n·ªÅn ·ªü v·ªã tr√≠ hi·ªán t·∫°i
            gc.drawImage(backgroundImage, 0, backgroundY - HEIGHT, WIDTH, HEIGHT); // V·∫Ω ·∫£nh n·ªÅn ph√≠a tr√™n
        } else {
            gc.setFill(Color.BLACK); // N·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh, v·∫Ω n·ªÅn m√†u ƒëen
            gc.fillRect(0, 0, WIDTH, HEIGHT);
        }

        // V·∫Ω c√°c ƒë·ªëi t∆∞·ª£ng trong tr√≤ ch∆°i
        for (GameObject obj : gameObjects) {
            obj.render(gc);
        }

        // V·∫Ω s·ªë m·∫°ng b·∫±ng h√¨nh ·∫£nh tr√°i tim
        drawLives();
    }

    private void drawLives() {
        // V·∫Ω ch·ªØ "Lives:" ·ªü g√≥c tr√™n b√™n ph·∫£i
        gc.setFill(Color.WHITE);
        gc.setFont(javafx.scene.text.Font.font(20)); // ƒê·∫∑t font ch·ªØ
        gc.fillText("Lives:", WIDTH - 200, 30); // D·ªãch ch·ªØ "Lives:" sang tr√°i m·ªôt ch√∫t

        // V·∫Ω h√¨nh ·∫£nh tr√°i tim b√™n ph·∫£i ch·ªØ "Lives:"
        if (heartImage != null) {
            for (int i = 0; i < numLives; i++) {
                gc.drawImage(heartImage, WIDTH - 140 + i * 35, 10, 30, 30); // D·ªãch tr√°i tim sang tr√°i m·ªôt ch√∫t
            }
        } else {
            // N·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh, hi·ªÉn th·ªã s·ªë m·∫°ng b·∫±ng ch·ªØ
            gc.fillText(String.valueOf(numLives), WIDTH - 140, 30);
        }
    }

    private void spawnEnemy() {
        // TƒÉng x√°c su·∫•t xu·∫•t hi·ªán k·∫ª ƒë·ªãch d·ª±a tr√™n ƒëi·ªÉm s·ªë
        double baseProbability = 0.008; // X√°c su·∫•t c∆° b·∫£n
        double difficultyMultiplier = 1 + (score / 400) * 0.4; // TƒÉng ƒë·ªô kh√≥ m·ªói 500 ƒëi·ªÉm
        double spawnProbability = baseProbability * difficultyMultiplier;

        if (Math.random() < spawnProbability) {
            double x = Math.random() * (WIDTH - Enemy.WIDTH) + Enemy.WIDTH / 2;
            gameObjects.add(new Enemy(x, -Enemy.HEIGHT / 2));
        }
    }

    private void spawnBossEnemy() {
        bossExists = true;
        gameObjects.add(new BossEnemy(WIDTH / 2, -BossEnemy.HEIGHT / 2));
    }

    private void checkCollisions() {
        // T·∫°o danh s√°ch t·∫°m th·ªùi ƒë·ªÉ l∆∞u c√°c ƒë·ªëi t∆∞·ª£ng c·∫ßn ƒë√°nh d·∫•u l√† "dead"
        List<GameObject> toRemove = new ArrayList<>();

        for (int i = 0; i < gameObjects.size(); i++) {
            GameObject obj1 = gameObjects.get(i);

            for (int j = i + 1; j < gameObjects.size(); j++) {
                GameObject obj2 = gameObjects.get(j);

                // S·ª≠ d·ª•ng bounding box ƒë·ªÉ ki·ªÉm tra va ch·∫°m
                if (obj1.getBounds().intersects(obj2.getBounds())) {
                    // X·ª≠ l√Ω va ch·∫°m gi·ªØa Bullet v√† Enemy
                    if ((obj1 instanceof Bullet && obj2 instanceof Enemy) ||
                        (obj1 instanceof Enemy && obj2 instanceof Bullet)) {
                        Bullet bullet = (Bullet) (obj1 instanceof Bullet ? obj1 : obj2);
                        Enemy enemy = (Enemy) (obj1 instanceof Enemy ? obj1 : obj2);

                        // Ch·ªâ t·∫°o hi·ªáu ·ª©ng n·ªï n·∫øu Enemy ch∆∞a ch·∫øt
                        if (!enemy.isDead()) {
                            enemy.setDead(true); // ƒê√°nh d·∫•u Enemy l√† "dead"
                            bullet.setDead(true); // ƒê√°nh d·∫•u Bullet l√† "dead"

                            // T·∫°o hi·ªáu ·ª©ng n·ªï t·∫°i v·ªã tr√≠ Enemy
                            gameObjects.add(new Explosion(enemy.getX(), enemy.getY()));

                            // TƒÉng ƒëi·ªÉm
                            score += 10;

                            // Random t·ª∑ l·ªá xu·∫•t hi·ªán PowerUp
                            double dropChance = 0.1; // 10% t·ª∑ l·ªá xu·∫•t hi·ªán PowerUp
                            if (Math.random() < dropChance) {
                                double powerUpX = enemy.getX();
                                double powerUpY = enemy.getY();
                                gameObjects.add(new PowerUp(powerUpX, powerUpY)); // T·∫°o PowerUp t·∫°i v·ªã tr√≠ Enemy
                            }
                        }

                        // Th√™m Bullet v√† Enemy v√†o danh s√°ch c·∫ßn x√≥a
                        toRemove.add(bullet);
                        toRemove.add(enemy);
                    }

                    // X·ª≠ l√Ω va ch·∫°m gi·ªØa Player v√† Enemy
                    else if (obj1 instanceof Player && obj2 instanceof Enemy) {
                        Player player = (Player) obj1;
                        Enemy enemy = (Enemy) obj2;

                        // ƒê√°nh d·∫•u Enemy l√† "dead"
                        enemy.setDead(true);
                        toRemove.add(enemy);

                        // Gi·∫£m s·ªë m·∫°ng c·ªßa Player
                        numLives--;

                        // K√≠ch ho·∫°t hi·ªáu ·ª©ng nh·∫•p nh√°y cho Player
                        player.triggerBlink();

                        // Ki·ªÉm tra n·∫øu s·ªë m·∫°ng gi·∫£m xu·ªëng 0
                        if (numLives <= 0) {
                            gameRunning = false; // K·∫øt th√∫c tr√≤ ch∆°i
                            System.out.println("Game Over! Returning to game over screen...");
                            showGameOverScreen((Stage) root.getScene().getWindow());
                            return;
                        }
                    }

                    // X·ª≠ l√Ω va ch·∫°m gi·ªØa Bullet v√† BossEnemy
                    else if ((obj1 instanceof Bullet && obj2 instanceof BossEnemy) ||
                             (obj1 instanceof BossEnemy && obj2 instanceof Bullet)) {
                        Bullet bullet = (Bullet) (obj1 instanceof Bullet ? obj1 : obj2);
                        BossEnemy boss = (BossEnemy) (obj1 instanceof BossEnemy ? obj1 : obj2);

                        // G·ªçi ph∆∞∆°ng th·ª©c takeDamage c·ªßa BossEnemy
                        boss.takeDamage(bullet.getDamage());

                        // ƒê√°nh d·∫•u ƒë·∫°n l√† "dead" sau khi va ch·∫°m
                        bullet.setDead(true);
                    }

                    // X·ª≠ l√Ω va ch·∫°m gi·ªØa Player v√† EnemyBullet
                    else if (obj1 instanceof Player && obj2 instanceof EnemyBullet) {
                        Player player = (Player) obj1;
                        EnemyBullet enemyBullet = (EnemyBullet) obj2;

                        // ƒê√°nh d·∫•u EnemyBullet l√† "dead"
                        enemyBullet.setDead(true);
                        toRemove.add(enemyBullet);

                        // Gi·∫£m s·ªë m·∫°ng c·ªßa Player
                        numLives--;

                        // K√≠ch ho·∫°t hi·ªáu ·ª©ng nh·∫•p nh√°y cho Player
                        player.triggerBlink();

                        // Ki·ªÉm tra n·∫øu s·ªë m·∫°ng gi·∫£m xu·ªëng 0
                        if (numLives <= 0) {
                            gameRunning = false; // K·∫øt th√∫c tr√≤ ch∆°i
                            System.out.println("Game Over! Returning to game over screen...");
                            showGameOverScreen((Stage) root.getScene().getWindow());
                            return;
                        }
                    }

                    // X·ª≠ l√Ω va ch·∫°m gi·ªØa Player v√† PowerUp
                    else if (obj1 instanceof Player && obj2 instanceof PowerUp) {
                        Player player = (Player) obj1;
                        PowerUp powerUp = (PowerUp) obj2;

                        // ƒê√°nh d·∫•u PowerUp l√† "dead"
                        powerUp.setDead(true);
                        toRemove.add(powerUp);

                        // T·∫°o hi·ªáu ·ª©ng ƒë·ªông t·∫°i v·ªã tr√≠ PowerUp
                        gameObjects.add(new PowerUpEffect(powerUp.getX(), powerUp.getY()));

                        // Random h√≥a hi·ªáu ·ª©ng PowerUp
                        if (numLives < 4 && Math.random() < 0.5) {
                            numLives++; // TƒÉng m·∫°ng n·∫øu ch∆∞a ƒë·∫°t t·ªëi ƒëa
                            System.out.println("Extra life gained! Lives: " + numLives);
                        } else {
                            player.activatePowerUp(8000); // TƒÉng s·ªë l∆∞·ª£ng ƒë·∫°n trong 8 gi√¢y
                            System.out.println("PowerUp activated: Increased bullet count for 8 seconds!");
                        }
                    }
                }
            }
        }

        // Lo·∫°i b·ªè c√°c ƒë·ªëi t∆∞·ª£ng ƒë√£ ƒë√°nh d·∫•u l√† "dead"
        gameObjects.removeAll(toRemove);
    }

    private void startGame(Stage primaryStage) {
        // D·ª´ng game loop n·∫øu ƒëang ch·∫°y
        if (gameLoop != null) {
            gameLoop.stop();
        }

        root = new Pane();
        Canvas canvas = new Canvas(WIDTH, HEIGHT); // ƒê·∫∑t k√≠ch th∆∞·ªõc Canvas theo khung h√¨nh m·ªõi
        gc = canvas.getGraphicsContext2D();
        root.getChildren().add(canvas);

        scoreLabel = new Label("Score: 0");
        scoreLabel.setFont(Font.font("Arial", 20)); // TƒÉng k√≠ch c·ª° ch·ªØ l√™n 24
        scoreLabel.setTextFill(Color.WHITE);
        scoreLabel.setLayoutX(10);
        scoreLabel.setLayoutY(10);
        root.getChildren().add(scoreLabel);

        scene = new Scene(root, WIDTH, HEIGHT, Color.BLACK);
        primaryStage.setScene(scene);
        primaryStage.show();

        // T·∫£i ·∫£nh n·ªÅn
        try {
            backgroundImage = new Image("background.png");
        } catch (Exception e) {
            System.out.println("Kh√¥ng th·ªÉ t·∫£i ·∫£nh n·ªÅn: " + e.getMessage());
            backgroundImage = null; // Fallback n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh
        }

        // T·∫£i ·∫£nh tr√°i tim
        try {
            heartImage = new Image("heart.png");
        } catch (Exception e) {
            System.out.println("Kh√¥ng th·ªÉ t·∫£i ·∫£nh heart: " + e.getMessage());
            heartImage = null; // Fallback n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh
        }

        initGame();
        initEventHandlers();

        // T·∫°o game loop m·ªõi
        gameLoop = new AnimationTimer() {
            @Override
            public void handle(long now) {
                update();
                render();
            }
        };
        gameLoop.start();
    }

    private void resetToStartScreen(Stage primaryStage) {
        // D·ª´ng game loop n·∫øu ƒëang ch·∫°y
        if (gameLoop != null) {
            gameLoop.stop();
        }

        // ƒê·∫∑t l·∫°i tr·∫°ng th√°i tr√≤ ch∆°i
        resetGame();

        // Hi·ªÉn th·ªã m√†n h√¨nh b·∫Øt ƒë·∫ßu
        showMainMenu(primaryStage);
    }

    private void resetGame() {
        gameObjects.clear(); // X√≥a t·∫•t c·∫£ c√°c ƒë·ªëi t∆∞·ª£ng trong tr√≤ ch∆°i
        numLives = 3;        // ƒê·∫∑t l·∫°i s·ªë m·∫°ng
        score = 0;           // ƒê·∫∑t l·∫°i ƒëi·ªÉm s·ªë
        bossExists = false;  // ƒê·∫∑t l·∫°i tr·∫°ng th√°i boss
        gameRunning = false; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i tr√≤ ch∆°i
        isShooting = false;  // ƒê·∫∑t l·∫°i tr·∫°ng th√°i b·∫Øn
        lastBossSpawnScore = 0; // ƒê·∫∑t l·∫°i m·ªëc xu·∫•t hi·ªán boss
    }

    private void showGameOverScreen(Stage primaryStage) {
        VBox rootGameOver = new VBox(20);
        rootGameOver.setAlignment(Pos.CENTER);
        rootGameOver.setStyle("-fx-background-color: black;");

        // Ti√™u ƒë·ªÅ "Game Over"
        Text gameOverText = new Text("GAME OVER");
        gameOverText.setFont(Font.font("Arial", 50));
        gameOverText.setFill(Color.RED);
        gameOverText.setTranslateY(-30); // Di chuy·ªÉn ch·ªØ "GAME OVER" l√™n ph√≠a tr√™n

        // Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë
        Text scoreText = new Text("Your Score: " + score);
        scoreText.setFont(Font.font("Arial", 30));
        scoreText.setFill(Color.WHITE);

        // N√∫t "Th·ª≠ L·∫°i" ƒë·ªÉ b·∫Øt ƒë·∫ßu m·ªôt v√°n ch∆°i m·ªõi
        Button retryButton = new Button("Try Again");
        retryButton.setFont(Font.font("Arial", 25));
        retryButton.setStyle("-fx-background-color: gray; -fx-text-fill: white;"); // M√†u n·ªÅn x√°m, ch·ªØ tr·∫Øng
        retryButton.setOnAction(e -> {
            resetGame(); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i tr√≤ ch∆°i
            startGame(primaryStage); // B·∫Øt ƒë·∫ßu tr√≤ ch∆°i m·ªõi
        });

        // Hi·ªáu ·ª©ng khi di chu·ªôt v√†o n√∫t "Try Again"
        retryButton.setOnMouseEntered(e -> retryButton.setStyle("-fx-background-color: lightgray; -fx-text-fill: black;")); // N·ªïi b·∫≠t
        retryButton.setOnMouseExited(e -> retryButton.setStyle("-fx-background-color: gray; -fx-text-fill: white;")); // Tr·ªü l·∫°i b√¨nh th∆∞·ªùng

        // N√∫t "Tho√°t" ƒë·ªÉ quay l·∫°i m√†n h√¨nh ch√≠nh
        Button exitButton = new Button("Exit Game");
        exitButton.setFont(Font.font("Arial", 25));
        exitButton.setStyle("-fx-background-color: red; -fx-text-fill: white;"); // M√†u n·ªÅn ƒë·ªè, ch·ªØ tr·∫Øng
        exitButton.setOnAction(e -> {
            resetGame(); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i tr√≤ ch∆°i
            showMainMenu(primaryStage); // Hi·ªÉn th·ªã m√†n h√¨nh ch√≠nh
        });

        // Hi·ªáu ·ª©ng khi di chu·ªôt v√†o n√∫t "Exit Game"
        exitButton.setOnMouseEntered(e -> exitButton.setStyle("-fx-background-color: darkred; -fx-text-fill: white;")); // N·ªïi b·∫≠t
        exitButton.setOnMouseExited(e -> exitButton.setStyle("-fx-background-color: red; -fx-text-fill: white;")); // Tr·ªü l·∫°i b√¨nh th∆∞·ªùng

        // Th√™m c√°c th√†nh ph·∫ßn v√†o giao di·ªán
        rootGameOver.getChildren().addAll(gameOverText, scoreText, retryButton, exitButton);

        Scene gameOverScene = new Scene(rootGameOver, WIDTH, HEIGHT);
        primaryStage.setScene(gameOverScene);
        primaryStage.show();
    }
}